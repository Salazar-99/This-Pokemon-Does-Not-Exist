from flask import Flask
import tensorflow as tf
from PIL import Image
from dotenv import load_dotenv
import boto3
import os
import io

#Initialize Flask app
app = Flask(__name__)

#AWS S3 setup
load_dotenv()
ACCESS_KEY_ID = os.getenv("ACCESS_KEY_ID")
SECRET_ACCESS_KEY = os.getenv("SECRET_ACCESS_KEY")

def download_model():
    """
    Downloads 'gan' directory from S3 containing a TF saved_model format model.

    Notes:
        Making use of boto3 requires AWS credentials to be configured on host machine.
        These are configured in the .env file
    """
    print("Downloading model...")
    session = boto3.Session(
        aws_access_key_id=ACCESS_KEY_ID,
        aws_secret_access_key=SECRET_ACCESS_KEY)
    s3_resource = session.resource('s3')
    bucket = s3_resource.Bucket('pokemon-dne')
    #Make local directories
    if not os.path.isdir('gan/'):
        os.mkdir('gan/')
    if not os.path.isdir('gan/variables/'):
        os.mkdir('gan/variables/')
    #Download model file
    model = 'gan/saved_model.pb'
    bucket.download_file(model, model)
    #Crawl through variables directory and download each file
    variables_prefix = 'gan/variables/'
    variables = bucket.objects.filter(Prefix=variables_prefix)
    for variable in variables:
        bucket.download_file(variable.key, variable.key)

#Prepare model for inference
model = tf.keras.models.load_model('gan/')
generator, _ = model.layers

@app.route('/')
def generate_image():
    """
    Main API route. Returns an image generated by passing a random vector 
    through the Generator of a trained GAN.
    """
    z = tf.random.normal([1, generator.coding_size])
    output = generator(z).numpy()
    image = Image.fromarray(output)
    return serve_image(image)

def serve_image(image):
    """
    Send image to client as JPEG

    Arguments:
        image (PIL.Image) - Image object to be sent
    """
    img_io = io.StringIO()
    image.save(img_io, 'JPEG', quality=100)
    img_io.seek(0)
    return send_file(img_io, mimetype='image/jpeg')

if __name__ == '__main__':
    download_model()
    app.run()

