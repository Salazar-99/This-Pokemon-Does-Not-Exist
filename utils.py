import tensorflow as tf 
import matplotlib.pyplot as plt
from matplotlib import image
import boto3

def plot_loss(loss):
    """
    Plot loss as a function of batch.

    Arguments:
        loss - A list of losses of length batch_size * epochs
    """
    epochs = [x+1 for x in range(len(loss))]
    plt.figure(figsize=(10,5))
    plt.plot(epochs, loss, color="blue", alpha=0.6)
    plt.title('Training Loss vs. Batch')
    plt.grid(alpha=0.5)
    plt.show()

def sample_from_vae(vae):
    """
    Generate and plot 5 samples from VAE.

    Arguments:
        vae - Tensorflow model
    """
    z = tf.random.normal([5, vae.latent_dims])
    images = vae.decode(z)
    plot_images(images)
    return images

def sample_from_gan(gan):
    """
    Generate and plot 5 samples from GAN.

    Arguments:
        gan - Tensorflow model
    """
    z = tf.random.normal([5, gan.coding_size])
    images = gan.generator(z)
    plot_images(images)
    return images

def plot_images(images):
    """
    Helper function for plotting samples from model:

    Arguments:
        images (tf.Tensor) - Tensor of numpy arrays generated by a model

    Notes:
        The number of samples/plots is currently hardcoded to 5
    """
    columns = 5
    rows = 1
    fig = plt.figure(figsize=(10, 20))
    for i in range(1, columns*rows +1):
        fig.add_subplot(rows, columns, i)
        plt.imshow(images[i-1])
    plt.show()

def upload_model(path_to_model, bucket='pokemon_dne', object_name=None):
    """
    Uploads saved model to S3 bucket.

    Arguments:
        path_to_model (str) - Path to saved Tensorflow model directory
        bucket (str) - Name of S3 bucket to store model in
        object_name (str) - Name of the model once it's uploaded to S3

    Notes:
        In order to use boto3, AWS credentials must be configured on host machine
    """
    if object_name is None:
        object_name = file_name
    s3_client = boto3.client('s3')
    s3_client.upload_file(path_to_model, bucket, object_name)
